#+TITLE: Org-mode 工作流第 2 部分: 处理收件箱
#+URL: https://blog.jethro.dev/posts/processing_inbox/
#+AUTHOR: K-gihu
#+DATE: [2020-12-13 日 18:53]
#+CATEGORY: org-mode
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

（译者注：翻译时的统一名词：
process 处理
inbox 收件箱
project 项目
item 条目
task 任务
checklist 检查清单
context 上下文）

（上一贴： [[/posts/capturing_inbox/][Org-mdoe 工作流第 1 部分：收件箱中的捕获]]）

有很多 to-do 清单的工作流不包含处理部分。这些工作流使用简单的检查清单，做完一项之后就把那一项打勾。为什么 David Allen （和我）推荐单独进行处理呢？

** 为啥要处理收件箱？
   :PROPERTIES:
   :CUSTOM_ID: why-process-the-inbox
   :END:

每次你完成了一个开环，并把它写到纸上，你可能会惊讶于 to-do 条目的数量多得远超预期。对那些那些检查清单中条目很少的人，我怀疑他们是把不重要（或更重要）的任务放到他们思想深处了，这可能意味着他们不相信自己的捕获系统。无论是多是少，都不理想。正巧，如果你的检查清单条目数量特别巨大，单独进行处理的好处也特别明显。

面对许多任务，你怎样挑选第一个该做的任务呢？你一定会浏览整个列表，然后选出你觉得在此时最好的任务。在这里，你会无意识地在心里处理所有条目。

这就是为什么我（和 David Allen）推荐把这个处理过程抽取出来。既然我们无论如何都在无意识地做这件事，何不明确化一些，而且每个任务只处理一次呢？

处理的一切都在于：

1. 让任务可行，并且。
2. 为任务赋予足够的上下文，以便我决定接下来该做哪个任务。

为了让任务可行，David Allen 推荐在处理的时候给每个 to-do 条目前面加上动词。我跳过这一条，因为在我的工作流中，行动是很明确的。例如如果收件箱里有一个链接，我的行动就会是浏览链接条目。然而，如果收件箱里捕获的条目是一个大任务，它可以拆解为很多小任务的话，我可能会删除这个任务并用小任务替换。

接下来，为确定接下来要做的事情，需要什么上下文呢？下面是一些有用的上下文提示：

1. *优先级：* 完成这件事对我有多重要？
2. *地点：* 我可以在哪里做这个任务？也许只能在家，或在学校、办公室。
3. *时间估计：* 如果我剩下的可用时间只有 30 分钟了，我会更想做那些预计时间不超过 30 分钟的任务，而不是做那些大任务（那样我必须暂停）。
4. *项目：* 如果这个任务属于某个特定项目，为这些任务分组、分类也有助益，因为我可以一起完成相关的任务。
5. *日期：* 这个任务可能有截止日期，或者只能在某一天执行。

或许还可以添加更多上下文信息，但我觉得这五条对我的需求足够了。

** 何时处理收件箱
   :PROPERTIES:
   :CUSTOM_ID: when-to-process-the-inbox
   :END:

这个问题是高度主观的，但我发现自己可以不假深入思索便完成这项任务，所以我发现自己在投入的工作之后的休息期间会处理收件箱。但更多的时候，我是在一天开始的早上和一天结束的夜晚进行处理。

一般我处理收件箱时做的第一件事就是为任务安排开始时间，或在必要的情况下设置任务截止时间。请让我解释一下这一点的重要性。

安排了开始时间的任务是我在那一天、那个时候绝对要做的任务。包括约会（和朋友或医生）。任务经常出现在日历上。通常我会把这些任务传送到 Google Calendar，并使用 [[https://github.com/myuhe/org-gcal.el][org-gcal]] 让这些条目在我的 birds-eye view 中可见。 *你的日历是神圣的！* ，不要为不必在那时完成的任务安排开始时间，这是错误的。

但是，还存在着必须在某个时间之前完成的任务。常见的例子有家庭作业、帐单支付。Org-mode 支持给这种任务添加截止日期，这种截止日期也会出现在 birds-eye agenda view 中。

** 这在 org-mode 中看起来是什么样
   :PROPERTIES:
   :CUSTOM_ID: how-this-looks-in-org-mode
   :END:

我首先浏览每个任务并为任务设置开始时间，或者设置截止时间。下面演示了 org-mode 中为任务添加截止时间的可视化界面（好用）：

[[https://d33wubrfki0l68.cloudfront.net/7ffd90b60416905768a524de9afb5d9d8f73250c/f4814/ox-hugo/deadline.gif]]

图 1：为条目添加截止时间

我本来想在这个系列里不写代码，但我想放一小段，让你们看看在 Org-mode 的 org-agenda 中配置出来有多简单。这是我用来处理每个收件箱条目的函数。

#+BEGIN_EXAMPLE
  (defun jethro/org-agenda-process-inbox-item ()
   "Process a single item in the org-agenda."
   (org-with-wide-buffer
   (org-agenda-set-tags)
   (org-agenda-priority)
   (call-interactively 'jethro/my-org-agenda-set-effort)
   (org-agenda-refile nil nil t)))
#+END_EXAMPLE

也许技术型读者可以猜出函数干了什么。下面一张 GIF 显示了我处理实际任务的过程（我没什么好藏的）

[[https://d33wubrfki0l68.cloudfront.net/1fa6ac00d6cb6562aaf445c812f0081a1c2aa175/cf06d/ox-hugo/process_inbox.gif]]

图 2：处理收件箱条目

让我们一步一步地过一遍：

1. *为任务赋予地点上下文* 。给任务打标签 =@school= 和 =@home= 意思是这个任务既可以在学校做，又可以在家做。
2. *为任务赋予优先级* ，在 =A,B,C= 之间。下面是我确定优先级的方法。是一种松散的二分法，不过对我够用了。

   - *A:* 无论如何都必须完成的任务。
   - *B:* 应该完成的任务，但只能在 =A= 之后完成。
   - *C:* 完成了有益的任务，但不是强制完成。

3. *估计任务时间* 。格式是 =HH:MM= 如果任务预计要耗费几天，它可能需要进一步分解。
4. *条目重新归档* 这里我把任务分配给了 =FYP= 项目，因为阅读任务和我的 Final Year Research 项目相关。

就这样！养成习惯，让你的收件箱中的条目数为零，留在收件箱中的条目是没有用处的。

** agenda 视图
   :PROPERTIES:
   :CUSTOM_ID: the-agenda-view
   :END:

一切都处理结束后，让我们看看 agenda 视图

[[https://d33wubrfki0l68.cloudfront.net/c340243b7ba0a7962d2413038973abda06085b9f/6cd55/ox-hugo/agenda_view.png]]

图 3: Org-agenda 视图

主要有 5 个组成部分：

- 每日 agenda :: 显示当天计划开始的任务，以及当天花在任务上的时间。还可以显示不同日子的 agenda、周 agenda 甚至年 agenda。
- 截止时间 :: 每日 agenda 下面都是即将截止的任务。
- 进行中 :: 显示进行中的任务，或当前未完成的任务。
- 项目任务 :: 属于某个特定项目的任务。
- 下一个任务 :: 独立的任务。

我把这个页面绑定到方便的快捷键上，所以我总是可以概览我的一天 agenda、目前我完成了什么、还有什么可做。[[https://gist.github.com/jethrokuan/78936a44f249e2c1a61b5184669a32d7][这个 gist]] 里有这个 agenda 视图的简化版，要是你对全部血淋淋的细节感兴趣，请随意查看我的 [[https://github.com/jethrokuan/.emacs.d/blob/master/init.el][emacs config]]。

** 做下一个该做的事
   :PROPERTIES:
   :CUSTOM_ID: doing-the-next-right-thing
   :END:

因为我们已经度过了处理任务的难关，选择任务就会很公式化了。这里是我使用的公式：

1. 用地点上下文过滤（例如我在家的时候，只显示打上 =@home= 标签的任务）
2. 如果我有时间限制，就用时间估计过滤。
3. 有没有今天开始的任务还没完成？如果有，选这个。
4. 有没有优先级为 A 的即将截止的任务？如果有，选这个。
5. 如果上一个完成的任务来自某个项目，下一个就选同一项目的高优先级任务，否则任选一个高优先级任务。

** 开始计时
   :PROPERTIES:
   :CUSTOM_ID: clocking-in
   :END:

我一选完任务，就在那一行按 =i= 开始计时，这让我追踪自己时间花在哪里。额外的好处是我越来越擅长估计每个任务花费的时间了，只要观察我花在上一个相似任务上的总时间。上面的 agenda 视图中可以看到已跟踪的任务的例子。这个信息在进行（David Allen 推荐的）每周回顾的时候也能派上用场。

** 每周回顾
   :PROPERTIES:
   :CUSTOM_ID: a-weekly-review
   :END:

我每周日进行一次快速每周回顾。回顾过程中，我：

1. 看我的所有时间花在哪里，思考是不是本可以做得更好。
2. 研究下周 agenda：看我重要的安排开始日期或截止日期的任务，决定是否需要完成任何准备性任务。
3. 回顾某些最近处理的任务。任务优先级可以随时间而变化，有可能在大量新任务袭来之后，某些重要的老任务被遗留下来。也有可能某些任务不再需要了。

** ... anddddd, that's it!
   :PROPERTIES:
   :CUSTOM_ID: dot-dot-dot-anddddd-that-s-it
   :END:

这就是任务管理系统的全部了。原始 GTD 系统更具有规范性，我所做的只是把一些一直以来有用的、易于在 org-mode 实现的部分挑选出来。

在[[/posts/zettelkasten_with_org/][本系列的最后]]，我会描述我用 org-mode 搭建的 Zettelkasten 系统。
